// package main

// import (
// 	"encoding/json"
// 	"fmt"
// 	"net/http"
// 	"os"
// 	"strings"

// 	"go-ai/types" // Import the types package
// )

// var assistantRole = "Assistant"
// var userRole = "User"
// var task = "Why is the sky blue?"

// func streamResponses(url string) {
// 	requestBody := fmt.Sprintf(`{
// 		"model": "llama3:8b",
// 		"prompt":"Here is a task that %s will help %s to %s."
// 	}`, assistantRole, userRole, task)

// 	req, err := http.NewRequest("POST", url, strings.NewReader(requestBody))
// 	if err != nil {
// 		fmt.Println("create request failed:", err)
// 		return
// 	}
// 	req.Header.Add("Content-Type", "application/json")

// 	client := &http.Client{}
// 	resp, err := client.Do(req)
// 	if err != nil {
// 		fmt.Println("create request failed:", err)
// 		return
// 	}
// 	defer resp.Body.Close()

// 	// Create a JSON decoder to decode the response body
// 	decoder := json.NewDecoder(resp.Body)

// 	// Loop to decode each JSON object in the stream
// 	for {
// 		var response types.Llama3Response // Use the Response type from the types package
// 		if err := decoder.Decode(&response); err != nil {
// 			fmt.Println("error decoding response:", err)
// 			break // Break the loop when EOF or any other error occurs
// 		}

// 		// Check if "done" is true
// 		if response.Done {
// 			fmt.Println("Response marked as done. Exiting...")
// 			os.Exit(0) // Exit the application
// 		}

// 		// Print the "response" field
// 		fmt.Print(response.Response)
// 	}
// }

// func main() {
// 	url := "http://localhost:11434/api/generate"

// 	// Launch a goroutine to handle streaming responses
// 	go streamResponses(url)

// 	// Wait for user input to exit (you can replace this with your own termination condition)
// 	var input string
// 	fmt.Scanln(&input)
// }
